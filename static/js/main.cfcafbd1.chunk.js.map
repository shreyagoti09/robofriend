{"version":3,"sources":["serviceWorker.js","components/Card.js","Userlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","Userlist","User","compo","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filtereduser","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCASC,G,KAbH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MAEnB,OACC,yBAAKC,UAAU,kDACd,yBAAKC,IAAI,MAAMC,IAAG,+BAA0BL,EAA1B,YAClB,6BACE,4BAAKC,GACL,+BAAKC,OCKGI,EAbA,SAAC,GAAU,IAATC,EAAQ,EAARA,KAEVC,EAAMD,EAAKE,KAAI,SAACC,EAAKC,GAC1B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAKI,GAAGX,GAAIC,KAAMM,EAAKI,GAAGV,KAAMC,MAAOK,EAAKI,GAAGT,WAIzE,OACC,6BACUM,ICEGK,EAZC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACC,yBAAKZ,UAAU,OACP,2BAAOA,UAAU,mCAChBa,KAAK,SACLC,YAAY,cACZC,SAAUH,MCENI,G,MARD,SAACC,GACd,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC5DJ,EAAMK,YC8CAC,E,kDAxCd,aAAc,IAAD,8BAED,gBAMTC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,SAN5B,EAAKC,MAAQ,CACZtB,KAAK,GACLI,YAAY,IALhB,E,gEAWU,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACnB,KAAK2B,S,+BAG5B,IAAD,EACoBC,KAAKN,MAAvBtB,EADF,EACEA,KAAKI,EADP,EACOA,YACJyB,EAAa7B,EAAK8B,QAAO,SAAA9B,GAC9B,OAAOA,EAAKT,KAAKwC,cAAcC,SAAS5B,EAAY2B,kBAErD,OAAI/B,EAAKiC,OAKN,yBAAKxC,UAAU,MACnB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,KAAMgC,MARX,2C,GAzBIK,aCHlBC,IAASC,OACJ,kBAAC,EAAD,MACHC,SAASC,eAAe,SN0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cfcafbd1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n//import {User} from './User';\r\nimport 'tachyons';\r\n\r\n\r\nconst Card =({id,name,email})=>{\r\n    \r\n   return(\r\n   \t<div className='tc bg-light-green dib pa2 br3 ma4 grow shadow5'>\r\n   \t\t<img alt=\"ima\" src={`https://robohash.org/${id}?10x10`} />\r\n\t    <div>\r\n\t\t     <h2>{name}</h2>\r\n\t\t     <p> {email}</p>\r\n\t    </div>\r\n    </div>\r\n   \t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './components/Card';\r\n\r\n\r\nconst Userlist=({User})=>{\r\n\r\n\tconst compo=User.map((user,i)=>{\r\n\t return\t<Card key={i} id={User[i].id} name={User[i].name} email={User[i].email}/>\r\n\t})\r\n\r\n\r\n\treturn(\r\n\t\t<div>\r\n           {compo}\r\n        </div>   \r\n    );\t\r\n}\r\nexport default Userlist;","import React from 'react';\r\n\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n    \t     <input className='pa3 ba b--green bg-lightest-blue' \r\n    \t      type='search'\r\n    \t      placeholder='Search robo' \r\n    \t      onChange={searchChange}/>\r\n        </div>\r\n\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll =(props)=>{\r\n\treturn(\r\n     <div style={{overflowY:'scroll',border:'3px solid black',height:'750px'}}>\r\n        {props.children}\r\n     </div>\r\n     );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport Userlist from '../Userlist';\r\n//import {User} from './User';\r\nimport 'tachyons';\r\nimport SearchBox from '../components/SearchBox';\r\nimport  '../containers/App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n\tconstructor(){\r\n\r\n       \t    \tsuper();\r\n                 this.state = {\r\n                 \tuser:[],\r\n                 \tsearchfield:''\r\n                 }\r\n    }\r\n    onSearchChange=(event)=>{\r\n    \tthis.setState({searchfield:event.target.value})\r\n    }\r\n    componentDidMount(){\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t.then(response=>response.json())\r\n    \t.then(users=>this.setState({user:users}));\r\n    \t\r\n    }\r\n\trender(){\r\n    const {user,searchfield}=this.state;\r\n      const filtereduser=user.filter(user=>{\r\n      \treturn user.name.toLowerCase().includes(searchfield.toLowerCase());\r\n      })\r\n      if(!user.length){\r\n      \treturn <h1>Loading</h1>\r\n      }\r\n      else{\r\n      \t return(\r\n       \t <div className=\"tc\">\r\n\t\t\t\t <h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t <SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t <Scroll>\r\n\t\t\t     \t<Userlist User={filtereduser} />\r\n\t\t\t   </Scroll>\t\r\n\t\t    </div>  \r\n\t    );\r\n      }\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(\n\t    <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}